---
- name: Create AWS key for Kubernetes
  ec2_key:
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') }}"
    name: "{{ keypair }}"
    region: "{{ region }}"
    state: present
  register: ec2_i

- name: Generate AWS private key for Kubernetes
  copy:
    content: "{{ ec2_i.key.private_key }}"
    dest: ~/.ssh/kubernetes.key
    mode: 0600

- name: Create EC2 Security Group
  ec2_group:
    name: "{{ security_group }}"
    description: Milestone3
    vpc_id: vpc-387fd250
    region: "{{ AWS_REGION }}"
    aws_secret_key: "{{ AWS_SECRET_KEY }}"
    aws_access_key: "{{ AWS_ACCESS_KEY }}"
    rules:
      - proto: all
        cidr_ip: 0.0.0.0/0

- name: Create EC2 Instance
  local_action: ec2
                image={{ image }}
                instance_type={{ instance_type }}
                group={{ security_group }}
                region={{ region }}
                keypair={{ keypair }}
                count={{ count }}
                wait=true
  register: ec2

- name: Add Kubernetes master in the inventory file
  add_host:
    groups: master
    hostname: "{{ ec2.instances[0].public_ip }}"
    ansible_ssh_user: "ubuntu"
    ansible_ssh_private_key_file: "~/.ssh/kubernetes.key"
    ansible_python_interpreter: "/usr/bin/python3"
    host_key_checking: "False"

- name: Add Kubernetes node 1 in the inventory file
  add_host:
    groups: nodes
    hostname: "{{ ec2.instances[1].public_ip }}"
    ansible_ssh_user: "ubuntu"
    ansible_ssh_private_key_file: "~/.ssh/kubernetes.key"
    ansible_python_interpreter: "/usr/bin/python3"
    host_key_checking: "False"

- name: Add Kubernetes node 2 in the inventory file
  add_host:
    groups: nodes
    hostname: "{{ ec2.instances[2].public_ip }}"
    ansible_ssh_user: "ubuntu"
    ansible_ssh_private_key_file: "~/.ssh/kubernetes.key"
    ansible_python_interpreter: "/usr/bin/python3"
    host_key_checking: "False"

- name: Add Kubernetes node 3 in the inventory file
  add_host:
    groups: nodes
    hostname: "{{ ec2.instances[3].public_ip }}"
    ansible_ssh_user: "ubuntu"
    ansible_ssh_private_key_file: "~/.ssh/kubernetes.key"
    ansible_python_interpreter: "/usr/bin/python3"
    host_key_checking: "False"

- name: Wait for SSH to come up
  wait_for: 
    host: "{{ item.public_ip }}"
    port: 22
    timeout: 320
    state: started
  with_items:
    "{{ ec2.instances }}"

- debug:
    msg: "EC2 IPs: {{ item.public_ip}}"
  with_items:
    "{{ ec2.instances }}"
